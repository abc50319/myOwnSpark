package com.wilson.mockdata;import com.clearspring.analytics.util.Lists;import com.wilson.conf.ConfigurationManager;import com.wilson.constant.Constants;import com.wilson.dategram.testInfoGPSGram;import com.wilson.util.DateUtils;import com.wilson.util.NumberUtils;import kafka.producer.KeyedMessage;import java.text.ParseException;import java.util.ArrayList;import java.util.List;/** * 测试数据，类型为cimId_terminalId_timeId_speed_satelliteNum_onlineStatus * 添加最后一个_onlineStatus */public class TestMockGpsTotal {    //发送对象数据    public static String getRandomGPSMessageData(testInfoGPSGram testData){        String cimId;        String terminalId;        String timeId;        String speed;        String satelliteNum;        String onlineStatus;        //testData.setCimId("41"+ String.valueOf(NumberUtils.getRandomInt(4)));        testData.setCimId("410");        testData.setTerminalId(String.valueOf(2000000+NumberUtils.getRandomInt(4000000)+1));        testData.setTime("2017010210"+ String.valueOf(NumberUtils.getRandomInt(6)));        testData.setSpeed(Double.parseDouble(String.valueOf(NumberUtils.getRandomInt(3))));        testData.setSatelliteNum(Integer.parseInt(String.valueOf(NumberUtils.getRandomInt(7)-1)));        //onlineStatus状态只会显示为0或者1        testData.setOnlineStatus(Integer.parseInt(String.valueOf(NumberUtils.getRandomInt(2))));        cimId = testData.getCimId();        terminalId = testData.getTerminalId();        timeId = testData.getTime();        speed = String.valueOf(testData.getSpeed());        satelliteNum = String.valueOf(testData.getSatelliteNum());        onlineStatus= String.valueOf(testData.getOnlineStatus());        return cimId+"_"+terminalId+"_"+timeId+"_"+speed+"_"+satelliteNum+"_"+onlineStatus;    }    //发送固定的列表数据    public static List<String> getFixedList() throws ParseException {        List<String> s1 = new ArrayList<String>();        //生产环境gpsLog测试数据        s1.add("serialNum:100,terminalId:1,time:"+(DateUtils.getNowTimeMilliSecond()-1000*60*10)+",online:1,serverIp:192.168.171.231");  //上一个十分钟，不配对        s1.add("serialNum:101,terminalId:2,time:"+(DateUtils.getNowTenminuteStart()+1000)+",online:1,serverIp:192.168.171.231");         //同一个十分钟配对，开始        s1.add("serialNum:101,terminalId:2,time:"+(DateUtils.getNowTenminuteStart()+1000*60)+",online:0,serverIp:192.168.171.231");      //同一个十分钟配对，结束        //跨小时配对，开始.假如当前是2018-04-23 16:49:00,则获取的是 2018-04-23 14:00:01        s1.add("serialNum:102,terminalId:3,time:"+(DateUtils.getCurrentSharpHourMilliSecond()-1000*60*60*2+1)+",online:1,serverIp:192.168.171.231");        //跨小时配对，结束.假如当前是2018-04-23 16:49:00,则获取的是 2018-04-23 16:49:01        s1.add("serialNum:102,terminalId:3,time:"+(DateUtils.getNowTenminuteStart()+1000)+",online:0,serverIp:192.168.171.231");        //生产环境gpsMessage测试数据        s1.add("GW_001@@@{\"appKey\":\"2C757E868261DDA96499EBAC251E38D1\",\"checksum\":0,\"cmdId\":\"420\",\"length\":174,\"message\":\"MjAxOC0wNC0xNyAxMzo0NjozOC43LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMQ==\",\"resultChecksum\":true,\"serialNo\":704420,\"terminalId\":\"1116996\",\"token\":\"89860617040031538095\",\"version\":\"4.4.3.13C\"}");        s1.add("GW_001@@@{\"appKey\":\"\",\"checksum\":0,\"cmdId\":\"420\",\"length\":1469,\"message\":\"MjAxOC0wNC0xNyAxMjowMTozNS43LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMTsyMDE4LTA0LTE3IDEyOjAxOjUwLjcsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwxOzIwMTgtMDQtMTcgMTI6MDI6MDUuNywgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowMjoyMC43LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjAyOjM1LjgsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwwOzIwMTgtMDQtMTcgMTI6MDI6NTAuOSwgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowMzowNS45LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjAzOjIxLjAsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwwOzIwMTgtMDQtMTcgMTI6MDM6MzYuMCwgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowMzo1MS4xLCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjA0OjA2LjIsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwwOzIwMTgtMDQtMTcgMTI6MDQ6MjEuMiwgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowNDozNi4zLCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjA0OjUxLjQsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwwOzIwMTgtMDQtMTcgMTI6MDU6MDYuNCwgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowNToyMS41LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjA1OjM2LjYsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCwwOzIwMTgtMDQtMTcgMTI6MDU6NTEuNiwgMC4wMDAwMDAsIDAuMDAwMDAwLDAuMDAsMCwwLC0xLCAwLjAwMDAwMCwwLjAwLDA7MjAxOC0wNC0xNyAxMjowNjowNi43LCAwLjAwMDAwMCwgMC4wMDAwMDAsMC4wMCwwLDAsLTEsIDAuMDAwMDAwLDAuMDAsMDsyMDE4LTA0LTE3IDEyOjA2OjIxLjgsIDAuMDAwMDAwLCAwLjAwMDAwMCwwLjAwLDAsMCwtMSwgMC4wMDAwMDAsMC4wMCww\",\"resultChecksum\":true,\"serialNo\":5420,\"terminalId\":\"1116751\",\"token\":\"\",\"version\":\"4.4.3.11C\"}");        //s1.add("151965926_8__1522174019000_0_1");   //2018/3/28 2:06:59		同一天，不同小时，配对的        //s1.add("151965926_8__1522174019000_0_1");   //2018/3/28 2:06:59		同一天，不同小时，配对的        //s1.add("151965923_5__1522373709000_1_0");   //2018/3/30 09:35:9		跨时段，不配对/*        s1.add("151965925_7__1522170909000_1_0");   //2018/3/28 1:15:9		同十分钟，配对的        s1.add("151965925_7__1522170959000_0_1");   //2018/3/28 1:15:59		同十分钟，配对的        s1.add("151965926_8__1522170909000_1_0");   //2018/3/28 1:15:9		同一天，不同小时，配对的        s1.add("151965926_8__1522174019000_0_1");   //2018/3/28 2:06:59		同一天，不同小时，配对的        s1.add("151965927_9__1522163709000_1_0");   //2018/3/27 23:15:9		不同天，不同小时，配对的        s1.add("151965927_9__1522166819000_0_1");   //2018/3/28 00:06:59	不同天，不同小时，配对的        s1.add("151965928_8__1522181709000_1_0");   //2018/3/28 4:15:9        s1.add("151965928_8__1522195619000_0_1");   //2018/3/28 4:54:59        s1.add("151965929_8__1522268109000_1_0");   //2018/3/29 4:15:9		测试天功能        s1.add("151965929_8__1522282019000_0_1");   //2018/3/29 8:06:59*//*        s1.add("411_1_20180329111_0_1_1");				//过滤掉的        s1.add("410_1_20180329111_4_6_1");        s1.add("410_1_20180329111_3_6_1");        s1.add("410_1_20180329111_2_6_1");        s1.add("410_1_20180329111_1_2_0");        s1.add("410_1_20180329111_0_-1_0");        s1.add("410_1_20180329111_0_2_0");        s1.add("410_1_20180329111_0_-1_0");        s1.add("410_1_20180329111_0_2_0");        s1.add("410_1_20180329111_0_2_0");*/        return s1;    }    //发送固定的列表数据List<KeyedMessage<String, String>>    public static List<KeyedMessage<String, String>> getFixedList2() throws ParseException {        List<KeyedMessage<String, String>> messageList = Lists.newArrayList();        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965918_1__"+ String.valueOf(DateUtils.getNowTenminuteStart()+1000)+"_1_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965918_1__"+ String.valueOf(DateUtils.getNowTenminuteStart()+1000)+"_1_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965918_1__"+ String.valueOf(DateUtils.getNowTenminuteStart()+3000)+"_0_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965919_1__"+ String.valueOf(DateUtils.getNowTenminuteStart()+3000)+"_1_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965919_1__"+ String.valueOf(DateUtils.getNowTenminuteStart()+5000)+"_0_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965920_2__"+ String.valueOf(DateUtils.getNowTenminuteStart()-6000)+"_1_1"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965920_2__"+ String.valueOf(DateUtils.getNowTenminuteStart()+3000)+"_0_0"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965921_3__"+ String.valueOf(DateUtils.getNowTenminuteStart()-6000)+"_1_1"));        messageList.add(new KeyedMessage<String, String>(ConfigurationManager.getProperty(Constants.KAFKA_TOPICS)                , "151965922_4__"+ String.valueOf(DateUtils.getNowTenminuteStart()+1000)+"_1_0"));        return messageList;    }}