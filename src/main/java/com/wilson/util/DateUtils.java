package com.wilson.util;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;/** * 日期时间工具类 * @author Administrator * */public class DateUtils {    public static final SimpleDateFormat TIME_FORMAT =            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    public static final SimpleDateFormat DATE_FORMAT =            new SimpleDateFormat("yyyy-MM-dd");    public static final SimpleDateFormat DATEKEY_FORMAT =            new SimpleDateFormat("yyyyMMdd");    /**     * 判断一个时间是否在另一个时间之前     * @param time1 第一个时间     * @param time2 第二个时间     * @return 判断结果     */    public static boolean before(String time1, String time2) {        try {            Date dateTime1 = TIME_FORMAT.parse(time1);            Date dateTime2 = TIME_FORMAT.parse(time2);            if(dateTime1.before(dateTime2)) {                return true;            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    /**     * 判断一个时间是否在另一个时间之后     * @param time1 第一个时间     * @param time2 第二个时间     * @return 判断结果     */    public static boolean after(String time1, String time2) {        try {            Date dateTime1 = TIME_FORMAT.parse(time1);            Date dateTime2 = TIME_FORMAT.parse(time2);            if(dateTime1.after(dateTime2)) {                return true;            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    /**     * 计算时间差值（单位为秒）     * @param time1 时间1     * @param time2 时间2     * @return 差值     */    public static int minus(String time1, String time2) {        try {            Date datetime1 = TIME_FORMAT.parse(time1);            Date datetime2 = TIME_FORMAT.parse(time2);            long millisecond = datetime1.getTime() - datetime2.getTime();            return Integer.valueOf(String.valueOf(millisecond / 1000));        } catch (Exception e) {            e.printStackTrace();        }        return 0;    }    /**     * 获取年月日和小时     * @param datetime 时间（yyyy-MM-dd HH:mm:ss）     * @return 结果（yyyy-MM-dd_HH）     */    public static String getDateHour(String datetime) {        String date = datetime.split(" ")[0];        String hourMinuteSecond = datetime.split(" ")[1];        String hour = hourMinuteSecond.split(":")[0];        return date + "_" + hour;    }    /**     * 获取当天日期（yyyy-MM-dd）     * @return 当天日期     */    public static String getTodayDate() {        return DATE_FORMAT.format(new Date());    }    /**     * 获取昨天的日期（yyyy-MM-dd）     * @return 昨天的日期     */    public static String getYesterdayDate() {        Calendar cal = Calendar.getInstance();        cal.setTime(new Date());        cal.add(Calendar.DAY_OF_YEAR, -1);        Date date = cal.getTime();        return DATE_FORMAT.format(date);    }    /**     * 格式化日期（yyyy-MM-dd）     * @param date Date对象     * @return 格式化后的日期     */    public static String formatDate(Date date) {        return DATE_FORMAT.format(date);    }    /**     * 格式化时间（yyyy-MM-dd HH:mm:ss）     * @param date Date对象     * @return 格式化后的时间     */    public static String formatTime(Date date) {        return TIME_FORMAT.format(date);    }    /**     * 解析时间字符串     * @param time 时间字符串     * @return Date     */    public static Date parseTime(String time) {        try {            return TIME_FORMAT.parse(time);        } catch (ParseException e) {            e.printStackTrace();        }        return null;    }    /**     * 格式化日期key     * @param date     * @return     */    public static String formatDateKey(Date date) {        return DATEKEY_FORMAT.format(date);    }    /**     * 格式化日期key     * @param datekey     * @return     */    public static Date parseDateKey(String datekey) {        try {            return DATEKEY_FORMAT.parse(datekey);        } catch (ParseException e) {            e.printStackTrace();        }        return null;    }    /**     * 格式化时间，保留到分钟级别     * yyyyMMddHHmm     * @param date     * @return     */    public static String formatTimeMinute(Date date) {        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");        return sdf.format(date);    }    /**     * 格式化时间，保留到十分钟级别,只有yyyyMMddHH0到yyyyMMddHH5     * yyyyMMddHHmm     * param unix时间戳字符串,时间单位为秒     * return yyyy-MM-dd HH:m格式时间字符串     */    public static String TimeStamp2TenMinuteSecond(String timestampString){        Long timestamp = Long.parseLong(timestampString)*1000;        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date.substring(0,11);    }    /**     * 格式化时间，保留到十分钟级别,只有yyyyMMddHH0到yyyyMMddHH5     * yyyyMMddHHmm     * param unix时间戳字符串,时间单位为毫秒     * return yyyy-MM-dd HH:m格式时间字符串     */    public static String TimeStamp2TenMinuteMillisecond(String timestampString){        Long timestamp = Long.parseLong(StringUtils.getStringNum(timestampString));        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date.substring(0,11);    }    /**     * 格式化时间，保留到十分钟级别,只有yyyyMMddHH0到yyyyMMddHH5     * yyyyMMddHHmm     * param unix时间戳字符串,时间单位为秒     * return yyyy-MM-dd HH:m格式时间字符串     */    public static String NowTimeStamp2TenMinute() throws ParseException {        Long timestamp = getNowTimeMilliSecond();        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date.substring(0,11);    }    /**     * 格式化时间，返回当前时间的上一个小时     * return yyyyMMddHH 格式时间字符串     */    public static String NowTimeStamp2TenMinuteLastHour() throws ParseException {        Long timestamp = getNowTimeMilliSecond();        timestamp = timestamp-3600000;        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date.substring(0,10);    }    /**     * 格式化时间，返回当前时间的前一天     * return yyyyMMdd 格式时间字符串     */    public static String NowTimeStamp2TenMinuteLastDay() throws ParseException {        Long timestamp = getNowTimeMilliSecond();        timestamp = timestamp-24*3600000;        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date.substring(0,8);    }    /**     * 将时间转换为时间戳     */    public static Long dateToStamp(String s) throws ParseException{        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");        Date date = simpleDateFormat.parse(s);        long  ts= date.getTime();        return ts;    }    /**     * 将时间转换为时间戳     */    public static String dateToStamp2(String s) throws ParseException{        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        Date date = simpleDateFormat.parse(s);        return String.valueOf(date.getTime());    }    /**     * function 获取当前十分钟时间段内的初始时间时间戳，精确到毫秒     * return Long,当前时间长整形,单位为毫秒     */    public static  Long getNowTenminuteStart() throws ParseException {        return dateToStamp(NowTimeStamp2TenMinute()+"000");    }    /**     * function 获取一个时间戳属于十分钟时段的初始时间时间戳，精确到毫秒     * return Long,当前时间长整形,单位为毫秒     */    public static  Long getTenminuteStartMillisecond(String unixTimeMillisecond) throws ParseException {        String s1 = TimeStamp2TenMinuteMillisecond(unixTimeMillisecond)+"000";        return dateToStamp(s1);    }    /**     * function 获取一个时间戳属于十分钟时段的结束时间戳，精确到毫秒     * return Long,当前时间长整形,单位为毫秒     */    public static  Long getTenminuteEndtMillisecond(String unixTimeMillisecond) throws ParseException {        String s1 = TimeStamp2TenMinuteMillisecond(unixTimeMillisecond)+"000";        return dateToStamp(s1)+600000;    }    /**     * function 获取当前十分钟时间段内的结束时间时间戳，精确到毫秒     * return Long,当前时间长整形,单位为毫秒     */    public static  Long getNowTenminuteEnd() throws ParseException {        return dateToStamp(NowTimeStamp2TenMinute()+"000")+600000;    }    /**     * 格式化时间，     * yyyyMMddHHmm     * param unix时间戳字符串,精确到秒     * return 20180227000301格式时间字符串     */    public static String TimeStamp2DateSecond(String timestampString){        Long timestamp = Long.parseLong(timestampString)*1000;        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date;    }    /**     * 格式化时间，     * yyyyMMddHHmm     * param unix时间戳字符串,精确到毫秒     * return 20180227000301格式时间字符串     */    public static String TimeStamp2Date2(String timestampString){        Long timestamp = Long.parseLong(timestampString);        String date = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date(timestamp));        return date;    }    /**     * function 获取当前时间戳，精确到秒     * param string,当前时间unix时间戳字符串     * return Long,当前时间长整形     */    public static  Long getNowTimeSecond() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        long nowTime = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return nowTime/1000;    }    /**     * function 获取当前时间戳，精确到毫秒     * param string,当前时间unix时间戳字符串     * return Long,当前时间长整形     */    public static  Long getNowTimeMilliSecond() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        long nowTime = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return nowTime;    }    /**     * function 获取当前时间的十分钟段开始时间戳，精确到毫秒     * param string,当前时间unix时间戳字符串     * return Long,当前时间长整形     */    public static  Long getNowTimeTenminuteStart() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        long nowTime = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return nowTime;    }    /**     * function 根据当前时间获取下一个整分钟的时间     * 		比如现在2017-12-14 17:01:03,返回2017-12-14 17:02:00的时间戳     * param string,当前时间unix时间戳字符串     * return Long,下一个整分钟的时间长整形     */    public static  Long getNextSharpMinute() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");        long time = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return time/1000 + 60;    }    /**     * function 输入连接时间(小时间)和关闭时间(大时间),返回连接时长秒。(前后时间不论大小)     * 		比如1520326219000(2018/3/6 16:50:19)和1520326223000(2018/3/6 16:50:23),返回时长     * param 连接时间,时间戳毫秒；关闭时间,时间戳毫秒；     * return String,连接时长秒     */    public static  Integer getSeconds(String connectTime,String closeTime) throws ParseException {        Long l1 = 0L;        if(Long.parseLong(closeTime)-Long.parseLong(connectTime)>=0){            l1= (Long.parseLong(closeTime)-Long.parseLong(connectTime))/1000;        }else{            l1= (Long.parseLong(connectTime)-Long.parseLong(closeTime))/1000;        }        return l1.intValue();    }    /**     * function 根据当前时间获取下一个整小时的时间戳     * 		比如现在2017-12-14 17:01:03,返回2017-12-14 18:00:00的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getNextSharpHourSecond() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH");        long time = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return time/1000 + 3600;    }    /**     * function 根据当前时间获取下一个整小时的时间戳     * 		比如现在2017-12-14 17:01:03,返回2017-12-14 18:00:00的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getNextSharpHourMilliSecond() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH");        long time = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return (time/1000 + 3600)*1000;    }    /**     * function 根据当前时间获取下一个整小时的时间戳     * 		比如现在2017-12-14 17:01:03,返回2017-12-14 18:00:00的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getCurrentSharpHourMilliSecond() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH");        long time = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        return time;    }    /**     * function 根据当前时间获取第二天零点时间戳     * 		比如现在2017-12-14 17:01:03,返回2017-12-15 00:00:00的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getNextSharpDay() throws ParseException {        Date now = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        long time = simpleDateFormat.parse(simpleDateFormat.format(now)).getTime();        //System.out.println("simpleDateFormat.format(now):"+simpleDateFormat.format(now));        return time/1000 + 60*60*24;    }    /**     * function 根据当前时间获取下周一零点时间戳     * 		比如现在2018-02-01 15:35:03,星期四,返回2018-02-05 00:00:00,星期一的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getNextSharpMonth() throws ParseException {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.DAY_OF_MONTH, 1);        calendar.add(Calendar.MONTH, 1);        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        long time = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime())).getTime();        return time/1000;    }    /**     * function 根据当前时间获取本月1号零点时间戳     * 		比如现在2018-02-01 15:35:03,星期四,返回2018-01-01 00:00:00,本周一的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getThisSharpMonth() throws ParseException {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.DAY_OF_MONTH, 1);        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        long time = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime())).getTime();        return time/1000;    }    /**     * function 根据当前时间获取下周一零点时间戳     * 		比如现在2018-02-01 15:35:03,星期四,返回2018-02-05 00:00:00,星期一的时间戳     * return Long,下一个整小时的时间长整形     */    public static  Long getNextSharpWeek() throws ParseException {        Calendar cal = Calendar.getInstance();        cal.setTime(getThisWeekMonday());        cal.add(Calendar.DATE, 6);        //System.out.println("cal.getTime():"+cal.getTime());        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        long time = simpleDateFormat.parse(simpleDateFormat.format(cal.getTime())).getTime();        return time/1000 + 60*60*24;    }    public static Date getThisWeekMonday() {        Date date = new Date();        Calendar cal = Calendar.getInstance();        cal.setTime(date);        // 获得当前日期是一个星期的第几天        int dayWeek = cal.get(Calendar.DAY_OF_WEEK);        if (1 == dayWeek) {            cal.add(Calendar.DAY_OF_MONTH, -1);        }        // 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一        cal.setFirstDayOfWeek(Calendar.MONDAY);        // 获得当前日期是一个星期的第几天        int day = cal.get(Calendar.DAY_OF_WEEK);        // 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);        return cal.getTime();    }    /**     * function 记录当前时间 yyyy-MM-dd HH:mm:ss     */    public static  void getNowTimeStr() throws ParseException {        Date d = new Date();        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        System.out.println("当前时间：" + sdf.format(d));    }}