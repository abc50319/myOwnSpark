package com.wilson.util;import com.wilson.conf.ConfigurationManager;import com.wilson.constant.Constants;import org.apache.spark.SparkConf;import org.apache.spark.SparkContext;import org.apache.spark.sql.SQLContext;import org.apache.spark.sql.hive.HiveContext;import java.util.ArrayList;import java.util.List;/** * Spark工具类 * @author Administrator * */public class SparkUtils {	/**	 * 根据当前是否本地测试的配置	 * 决定，如何设置SparkConf的master	 */	public static void setMaster(SparkConf conf) {		boolean local = ConfigurationManager.getBoolean(Constants.SPARK_LOCAL);		if(local) {			conf.setMaster("local[2]");		}	}	/**	 * 获取SQLContext	 * 如果spark.local设置为true，那么就创建SQLContext；否则，创建HiveContext	 * @param sc	 * @return	 */	public static SQLContext getSQLContext(SparkContext sc) {		boolean local = ConfigurationManager.getBoolean(Constants.SPARK_LOCAL);		if(local) {			return new SQLContext(sc);		} else {			return new HiveContext(sc);		}	}	/**	 * function 输入20180326150_20180326155,返回<20180326150,20180326151,20180326152,20180326153,20180326154,20180326155>	 *     返回配对的数据中，包括的十分钟级别的列表数据	 * @author by wilsonlsm006@163.com	 * @date	2018-03-27 09:40	 * param   20180326150_20180326155				1519660981609_1519660985609   已经排好序的一个时间戳列表	 * return <20180326150,20180326151,20180326152,20180326153,20180326154,20180326155>	 */	public static List getPairDurationList(List<String> pairList) {		List<String> list = new ArrayList<String>();		String startStr,endStr,startFormatDate,endFormatDate;		if(Long.parseLong(pairList.get(0))>=Long.parseLong(pairList.get(1))){			startFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(pairList.get(1));			endFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(pairList.get(0));		}else{			startFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(pairList.get(0));			endFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(pairList.get(1));		}		System.out.println("startFormatDate:"+startFormatDate);		System.out.println("endFormatDate:"+endFormatDate);		int startDayHourTenminute = Integer.parseInt(startFormatDate.substring(6,startFormatDate.length()));		int endDayHourTenminute = Integer.parseInt(endFormatDate.substring(6,endFormatDate.length()));		System.out.println("startDayHourTenminute:"+startDayHourTenminute);		System.out.println("endDayHourTenminute:"+endDayHourTenminute);		//1.年月日时分(十分钟)都相同(已验证)   作为单独的一类		if(startDayHourTenminute == endDayHourTenminute){			//直接相减			list.add(startFormatDate);		}		//2.年月日时相同,分(十分钟)不同		else if(startDayHourTenminute/10 == endDayHourTenminute/10) {			//返回列表			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		//3.年月日相同,时、分(十分钟)不同		else if(startDayHourTenminute/1000 == endDayHourTenminute/1000) {			int maxOfStartHour =startDayHourTenminute/10*10+5;			int minOfEndOfHour = (startDayHourTenminute/10+1)*10;			System.out.println("年月日相同,时、分(十分钟)");			System.out.println("maxOfStartHour："+maxOfStartHour);			System.out.println("minOfEndOfHour："+minOfEndOfHour);			//返回列表			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == maxOfStartHour) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = minOfEndOfHour + (i / 6) * 10 + i % 6;				if (startToSum == endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		//4.年月相同，日、时和分(十分钟)不相同,因为业务规则中连接时长最多是跨日的(已验证)		else  {			//返回列表			int maxOfStartDay = startDayHourTenminute/1000*1000+235;			int minOfEndOfDay = endDayHourTenminute /1000*1000;			//跨天的分成两部分来算，转化成同一天不同小时的来算			//第一部分,计算 startDayHourTenminute 到25235的数据			for(int i=0;i<Long.MAX_VALUE;i++){				int startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == maxOfStartDay) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}			//第二部分,计算26000到 endDayHourTenminute 的数据			for(int i=0;i<Long.MAX_VALUE;i++){				int startToSum = minOfEndOfDay + (i / 6) * 10 + i % 6;				if (startToSum== endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		return list;	}	/**	 * function 输入20180326150_20180326155,返回<20180326150,20180326151,20180326152,20180326153,20180326154,20180326155>	 *     返回配对的数据中，包括的十分钟级别的列表数据	 * @author by wilsonlsm006@163.com	 * @date	2018-03-27 09:40	 * param   20180326150_20180326155				1519660981609_1519660985609   已经排好序的一个时间戳列表	 * return <20180326150,20180326151,20180326152,20180326153,20180326154,20180326155>	 */	public static List<String> getPairDurationList2(String inputStr) {		List<String> list = new ArrayList<String>();		String startStr,endStr,startFormatDate,endFormatDate;		if(Long.parseLong(inputStr.split("__")[0])>=Long.parseLong(inputStr.split("__")[1])){			startFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(inputStr.split("__")[1]);			endFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(inputStr.split("__")[0]);		}else{			startFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(inputStr.split("__")[0]);			endFormatDate=DateUtils.TimeStamp2TenMinuteMillisecond(inputStr.split("__")[1]);		}		int startDayHourTenminute = Integer.parseInt(startFormatDate.substring(6,startFormatDate.length()));		int endDayHourTenminute = Integer.parseInt(endFormatDate.substring(6,endFormatDate.length()));		//1.年月日时相同,十分钟都不同		if(startDayHourTenminute/10 == endDayHourTenminute/10) {			//返回列表			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		//2.年月日相同,时、分(十分钟)不同		else if(startDayHourTenminute/1000 == endDayHourTenminute/1000) {			int maxOfStartHour =startDayHourTenminute/10*10+5;			int minOfEndOfHour = (startDayHourTenminute/10+1)*10;			//返回列表			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == maxOfStartHour) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}			for(int i=0;i<Long.MAX_VALUE;i++){				Integer startToSum = minOfEndOfHour + (i / 6) * 10 + i % 6;				if (startToSum == endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		//3.年月相同，日、时和分(十分钟)不相同,因为业务规则中连接时长最多是跨日的(已验证)		else  {			//返回列表			int maxOfStartDay = startDayHourTenminute/1000*1000+235;			int minOfEndOfDay = endDayHourTenminute /1000*1000;			//跨天的分成两部分来算，转化成同一天不同小时的来算			//第一部分,计算 startDayHourTenminute 到25235的数据			for(int i=0;i<Long.MAX_VALUE;i++){				int startToSum = startDayHourTenminute + (i / 6) * 10 + i % 6;				if (startToSum == maxOfStartDay) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}			//第二部分,计算26000到 endDayHourTenminute 的数据			for(int i=0;i<Long.MAX_VALUE;i++){				int startToSum = minOfEndOfDay + (i / 6) * 10 + i % 6;				if (startToSum== endDayHourTenminute) {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));					break;				} else {					list.add(startFormatDate.substring(0,6)+String.valueOf(startToSum));				}			}		}		return list;	}}