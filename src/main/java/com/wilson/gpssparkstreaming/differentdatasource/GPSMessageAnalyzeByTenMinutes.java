package com.wilson.gpssparkstreaming.differentdatasource;import com.wilson.conf.ConfigurationManager;import com.wilson.constant.Constants;import com.wilson.dao.GpsMessageInsertDAO;import com.wilson.dao.factory.DAOFactory;import com.wilson.dategram.GPSMsgGram;import com.wilson.util.*;import org.apache.spark.api.java.JavaPairRDD;import org.apache.spark.api.java.JavaRDD;import org.apache.spark.api.java.function.*;import org.apache.spark.streaming.api.java.JavaDStream;import org.apache.spark.streaming.api.java.JavaPairDStream;import scala.Tuple2;import java.util.*;/** * describe:实时分析GPS消息数据 * 数据接入:kafka,使用测试数据 * 数据加工：spark streaming流处理 * 数据同步:hbase,写入"bd_spark_gps_tenMinutes"表 * author by wilson * date:2018-01-22 16:36:00 * */public class GPSMessageAnalyzeByTenMinutes {	/**	 * function 实时处理kafka的消息，然后统计十分钟级别的指标	 * param GPSRMessageDstream	 *       数据源格式：GW_001@@@{"appKey":"268323387AEF5A4DD16CEA7CA757F4FD","checksum":0,"cmdId":"210","length":1544,"message":"xx-xx","resultChecksum":true,"serialNo":1515663312129,"terminalId":"1570577","token":"89860616090057810713","version":"4.2.2.11"}	 * author by liushuming	 * date 2018-02-07 16:49:00	 */	public static void dealGPSMessageTenMinutes(JavaDStream<String> kafkaGPSRMessageInputDstream){		//step1 获取<terminalId_timeId(十分钟级别),speed_satelliteNum_onlineStatus>		JavaPairDStream<String, String> inputFormatDataDStream = getFormatData(kafkaGPSRMessageInputDstream);		//step3 统计各个指标(terminalId_timeId,总点数_采集频次_在线点数_弱信号点数_GPS为未启点数_速度为0点数_离线点数_正常点数_在线占比)		//获得格式为<terminalId_timeId，指标名_指标值>		//3.1.计算总点数		JavaPairDStream<String, String> GPSTotalDStream = getGPSTotalNum(inputFormatDataDStream);		//3.2.计算采集频次		JavaPairDStream<String, String> terminalIdFrequencyDStream = getGPSFrequency(GPSTotalDStream);		//3.3.计算在线点数		JavaPairDStream<String, String> GPSOnlineNumDStream = getGPSOnlineNum(inputFormatDataDStream);		//3.4 计算弱信号点数		JavaPairDStream<String, String> GPSWeakNumDStream = getGPSWeakNum(inputFormatDataDStream);		//3.5 计算GPS未开启点数		JavaPairDStream<String, String> GPSNotOpenNumDStream = getGPSNotOpenNum(inputFormatDataDStream);		//3.6 计算速度为0的点数		JavaPairDStream<String, String> GPSZeroSpeedNumDStream = getGPSZeroSpeedNum(inputFormatDataDStream);		//3.7 计算离线GPS点数		JavaPairDStream<String, String> GPSOfflineNumDStream = getGPSOfflineNum(inputFormatDataDStream);		//3.8 计算正常GPS点数		JavaPairDStream<String, String> GPSNormalNumDStream = getGPSNormalNum(inputFormatDataDStream);		//3.9 计算在线GPS占比		JavaPairDStream<String, String> gpsOnlinePercent = getGPSOnlinePercent(GPSTotalDStream, GPSOnlineNumDStream);		//step4 将不同指标的DStream合并到同一个DStream中,<terminalId_timeId，指标名_指标值>		JavaPairDStream<String, String> unionedAllDStream = terminalIdFrequencyDStream.union(GPSTotalDStream).union(GPSOnlineNumDStream)				.union(GPSWeakNumDStream).union(GPSNotOpenNumDStream).union(GPSZeroSpeedNumDStream)				.union(GPSOfflineNumDStream).union(GPSNormalNumDStream).union(gpsOnlinePercent);		//step5 数据同步阶段，将合并的指标数据输出到hbase，以便于j2ee系统使用		InsertIntoHBase(unionedAllDStream				,ConfigurationManager.getProperty(Constants.HBASE_TABLE_GPS_TENMINUTE));	}	//将统计好的指标数据插入到hbase	private static void InsertIntoHBase(JavaPairDStream<String, String> unionedAllDStream,final String hbaseTable) {		unionedAllDStream.foreachRDD(new VoidFunction<JavaPairRDD<String, String>>() {			@Override			public void call(JavaPairRDD<String, String> rdd) throws Exception {				rdd.foreachPartition(new VoidFunction<Iterator<Tuple2<String, String>>>() {					@Override					public void call(Iterator<Tuple2<String, String>> iterator) throws Exception {						//GPSMessageOutput2这是作为一个对象来存储<terminalId_timeId，指标名_指标值>						//优化前:原来是将指标转化为一个对象进行插入操作						//优化后:直接组合为一个字符串(terminalId_timeId__指标名_指标值)进行插入						//优化原理是使用字符串比对象节约内存						List<String> gpsMessageOutputsList = new ArrayList<String>();						//HBaseUtil.init("zkHost");						if(iterator.hasNext()){							while(iterator.hasNext()) {								Tuple2<String, String> tuple = iterator.next();								//数据格式为<terminalId_timeId,指标名_指标值>								gpsMessageOutputsList.add(tuple._1+"__"+tuple._2);							}							if(!gpsMessageOutputsList.isEmpty()){								GpsMessageInsertDAO gpsMessageOutputDao = DAOFactory.gpsMessageInsertDAO();								gpsMessageOutputDao.insertBatch(hbaseTable,gpsMessageOutputsList);							}						}					}				});			}		});	}	//将数据进行预处理操作，转化成目标格式。	// 每15秒采集一次数据，频率分为1或者5，所以每条数据里message包含15个点或者3个点。	// 因为每条数据中message包含多个点，可能是15个点，可能是5个点	//input GW_001@@@{"appKey":"D5594FA665B3F744BA51E3C8802B1078","checksum":0,"cmdId":"410","length":175,"message":"xx=","resultChecksum":true,"serialNo":3004410,"terminalId":"1115116","token":"89860616080000625730","version":"4.2.2.7C"}	private static JavaPairDStream<String, String> getFormatData(JavaDStream<String> kafkaGPSRMessageInputDstream){		//kafkaGPSRMessageInputDstream.print();		Function<JavaRDD<String>, JavaPairRDD<String, String>> delFormatFunc =				new Function<JavaRDD<String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaRDD<String> v1) throws Exception {						//step1 过滤，保留cimId为420的数据						return v1.filter((stringStringTuple2)->stringStringTuple2.contains("\"cmdId\":\"420\""))								//step2 获取目标格式数据<terminalId_timeId,speed_satelliteNum_onlineStatus>								//由于一条数据是采集了多个点，所以使用一对多flatMap,将多个点切成多条数据								.flatMapToPair(new PairFlatMapFunction<String, String, String>() {									@Override									public Iterator<Tuple2<String, String>> call(String inputStr) throws Exception {										GPSMsgGram gpsMsgGram = JsonUtil.getObject(inputStr.split("@@@")[1],GPSMsgGram.class);										String terminalId = gpsMsgGram.getTerminalId();										String gpsInfoList = new String(gpsMsgGram.getMessage(),"UTF-8");										ArrayList<Tuple2<String,String>> gpsFormatList=new ArrayList<Tuple2<String,String>>();										String[] splitGpsList = gpsInfoList.split(";");										for(int i=0;i<splitGpsList.length;i++){											gpsFormatList.add(new Tuple2<String,String>(terminalId+"_"+GPSMessageUtils.dealGPSInfo(splitGpsList[i]).split("__")[0]													,GPSMessageUtils.dealGPSInfo(splitGpsList[i]).split("__")[1]));										}										return gpsFormatList.iterator();									}								});					}				};		return kafkaGPSRMessageInputDstream.transformToPair(delFormatFunc);	}	//将数据进行预处理操作，转化成目标格式。	// 每15秒采集一次数据，频率分为1或者5，所以每条数据里message包含15个点或者3个点。	// 因为每条数据中message包含多个点，可能是15个点，可能是5个点	//input GW_001@@@{"appKey":"D5594FA665B3F744BA51E3C8802B1078","checksum":0,"cmdId":"410","length":175,"message":"xx=","resultChecksum":true,"serialNo":3004410,"terminalId":"1115116","token":"89860616080000625730","version":"4.2.2.7C"}	private static JavaPairDStream<String, String> getFormatData1(JavaDStream<String> kafkaGPSRMessageInputDstream){		Function<JavaRDD<String>, JavaPairRDD<String, String>> delFormatFunc =				new Function<JavaRDD<String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaRDD<String> v1) throws Exception {						//step1 过滤，保留cimId为420的数据						return v1.filter((stringStringTuple2)->stringStringTuple2.contains("\"cmdId\":\"420\""))								//step2 获取目标格式数据<terminalId_timeId,speed_satelliteNum_onlineStatus>								.mapToPair(new PairFunction<String, String, String>() {									@Override									public Tuple2<String,String> call(String inputStr) throws Exception {										GPSMsgGram gpsMsgGram = JsonUtil.getObject(inputStr.split("@@@")[1],GPSMsgGram.class);										String terminalId = gpsMsgGram.getTerminalId();										String gpsInfo = new String(gpsMsgGram.getMessage(),"UTF-8");										return new Tuple2<String, String>(terminalId+"_"+GPSMessageUtils.dealGPSInfo(gpsInfo).split("__")[0]												, GPSMessageUtils.dealGPSInfo(gpsInfo).split("__")[1]);									}								});					}				};		return kafkaGPSRMessageInputDstream.transformToPair(delFormatFunc);	}	/**	 * function 计算出GPS在线比例，计算测试是：十分钟内在线的GPS的点数比上总的GPS的点数	 * param gpsTotalDStream gps总点数DStream	 * param gpsOnlineNumDStream gps在线点数DStream	 * #return  Dstream，返回速度等于0的用户设备和GPS实时点数<terminalId_timeId,gpsonlinePercent>	 * author by liushuming	 * date 2018-02-05 10:43:00	 */	private static JavaPairDStream<String, String> getGPSOnlinePercent(JavaPairDStream<String, String> gpsTotalDStream, JavaPairDStream<String, String> gpsOnlineNumDStream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSOnlinePercentFunc = new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {			@Override			public JavaPairRDD<String, String> call(JavaPairRDD<String, String> v1) throws Exception {				return v1.reduceByKey(new Function2<String, String, String>() {					@Override					public String call(String v1, String v2) throws Exception {						//step3 <terminalId_timeId(十分钟),gpsTotalNum_指标值>和<terminalId_timeId(十分钟),gpsOnlineTotal_指标值>,转化成<terminalId_timeId(十分钟),gpsOnlinePercent_指标值>						if(v2.equals("null")){ return null; }						else{							if(Integer.parseInt(v1.split("_")[1])>=Integer.parseInt(v2.split("_")[1])){								return ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSONLINEPERCENT) + "_" + Double.toString(NumberUtils.formatDouble(Double.parseDouble(v2.split("_")[1])/Double.parseDouble(v1.split("_")[1]),2));							}else{								return ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSONLINEPERCENT) + "_" + Double.toString(NumberUtils.formatDouble(Double.parseDouble(v1.split("_")[1])/Double.parseDouble(v2.split("_")[1]),2));							}						}					}				});			}		};		return gpsTotalDStream.union(gpsOnlineNumDStream).transformToPair(getGPSOnlinePercentFunc);	}	/**	 * @author liushuming	 * @date    2017-02-01 17:50:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户十分钟内GPS正常的点数，判定规则为：在线，并且信号正常	 * @input   Dstream，过滤之后的GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream，返回速度等于0的用户设备和GPS实时点数<terminalId_timeId,gpsNormalNum>	 */	private static JavaPairDStream<String,String> getGPSNormalNum(JavaPairDStream<String, String> inputFormatDataDStream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSZeroSpeedNumFunc =				new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaPairRDD<String, String> v1) throws Exception {						//step1 根据在线并且信号正常规则进行过滤						return v1.filter((Tuple2<String, String> t1)->1 == Integer.parseInt(t1._2.split("_")[2]) && Integer.parseInt(t1._2.split("_")[1]) >= 4)								//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>								.mapToPair((Tuple2<String,String> t1)->new Tuple2<String, Integer>(t1._1,1))								//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>								.reduceByKey((Integer i1, Integer i2)-> i1+i2)								//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsweaktotal_sum>								.mapToPair((Tuple2<String, Integer> t1)->new Tuple2<String, String>(t1._1										,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSNORMALNUM)+"_"+t1._2));					}				};		return inputFormatDataDStream.transformToPair(getGPSZeroSpeedNumFunc);	}	/**	 * @author liushuming	 * @date    2017-01-15 15:06:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户十分钟内GPS速度为0的点数	 * @input   Dstream，过滤之后的GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream，返回速度等于0的用户设备和GPS实时点数<terminalId_timeId,zeroSpeedNum>	 */	private static JavaPairDStream<String, String> getGPSZeroSpeedNum(JavaPairDStream<String, String> inputDataFormatDStream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSZeroSpeedNumFunc =				new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaPairRDD<String, String> v1) throws Exception {						//step1 先过滤掉速度为0的GPS数据						return v1.filter((Tuple2<String, String> t1)-> 0 == Double.parseDouble(t1._2.split("_")[0]))								//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>								.mapToPair((Tuple2<String, String> t1)->new Tuple2<String, Integer>(t1._1,1))								//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>								.reduceByKey((Integer i1, Integer i2)->i1+i2)								//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsweaktotal_sum>								.mapToPair((Tuple2<String, Integer> t1)->new Tuple2<String, String>(t1._1										,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_ZEROSPEEDNUM)+"_"+t1._2));					}				};		return inputDataFormatDStream.transformToPair(getGPSZeroSpeedNumFunc);	}	/**	 * @author liushuming	 * @date    2017-01-15 15:00:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户十分钟内GPS未开启点数	 *          判定规则：卫星颗数等于-1为GPS未开启点数	 * @input   Dstream，过滤之后的GPS数据集,(terminalId_timeId,speed|satelliteNum)	 * #return  Dstream，返回卫星颗数等于-1的用户设备和GPS实时点数<terminalId_timeId,gpsNotOpenNum>	 */	private static JavaPairDStream<String, String> getGPSNotOpenNum(JavaPairDStream<String, String> inputDataFormatDStream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSNotopenNumFunc =				new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaPairRDD<String, String> v1) throws Exception {						//step1 先过滤掉卫星颗数等于-1的						return v1.filter((Tuple2<String, String> t1)->-1 == Integer.parseInt(t1._2.split("_")[1]))								//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>								.mapToPair((Tuple2<String, String> t1)->new Tuple2<String, Integer>(t1._1,1))								//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>								.reduceByKey((Integer i1, Integer i2)->i1+i2)								//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsweaktotal_sum>								.mapToPair((Tuple2<String, Integer> t1)->new Tuple2<String, String>(t1._1										,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSNOTOPENNUM)+"_"+t1._2));					}				};		return inputDataFormatDStream.transformToPair(getGPSNotopenNumFunc);	}	/**	 * @author liushuming	 * @date    2017-01-15 09:32:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户十分钟内弱信号GPS点数	 *          判定规则：卫星颗数小于4为弱信号	 * @input   Dstream，过滤之后的GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream，返回卫星颗数小于4的用户设备和GPS实时点数<terminalId_timeId,gpsWeakNum>	 */	private static JavaPairDStream<String, String> getGPSWeakNum(JavaPairDStream<String, String> inputFormatDstream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSWeakNumFunc =				new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {					@Override					public JavaPairRDD<String, String> call(JavaPairRDD<String, String> v1) throws Exception {						//step1 先过滤掉卫星可数小于4的						return v1.filter((Tuple2<String, String> t1)-> Integer.parseInt(t1._2.split("_")[1])<4 && Integer.parseInt(t1._2.split("_")[1])>0)								//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>								.mapToPair((Tuple2<String, String> t1)->new Tuple2<String, Integer>(t1._1,1))								//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>								.reduceByKey((Integer i1, Integer i2)->i1+i2)								//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsweaktotal_sum>								.mapToPair((Tuple2<String, Integer> t1)->new Tuple2<String, String>(t1._1										,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSWEAKNUM)+"_"+t1._2));					}				};		return inputFormatDstream.transformToPair(getGPSWeakNumFunc);	}	/**	 * @author  liushuming	 * @date    2018-02-01 09:00:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户GPS十分钟内实时总点数	 * @input   Dstream,过滤之后的标准格式GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream,返回单个terminalID的10分钟实时GPS点数,<terminalId_timeId,gpsOnlineTotal>	 */	private static JavaPairDStream<String, String> getGPSOnlineNum(JavaPairDStream<String, String> inputFormatDstream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSOnlineNumFunc = new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {			@Override			public JavaPairRDD<String, String> call(JavaPairRDD<String, String> rdd) throws Exception {				//step1 根据onlineStatus进行过滤,为0则为离线				return rdd.filter((Tuple2<String, String> v1)->1 == Integer.parseInt(v1._2.split("_")[2]))						//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>						.mapToPair((Tuple2<String, String> stringStringTuple2)->new Tuple2<String, Integer>(stringStringTuple2._1,1))						//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>						.reduceByKey((Integer v1, Integer v2)->v1+v2)						//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsonlinetotal_sum>						.mapToPair((Tuple2<String, Integer> stringIntegerTuple2)->new Tuple2<String, String>(stringIntegerTuple2._1								,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSONLINETOTAL)+"_"+stringIntegerTuple2._2));			}		};		return inputFormatDstream.transformToPair(getGPSOnlineNumFunc);	}	/**	 * @author  liushuming	 * @date    2018-02-01 17:45:00	 * @email   wilsonlsm006@163.com	 * @function  计算单个用户GPS十分钟内离线总点数	 * @input   Dstream,过滤之后的标准格式GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream,返回单个terminalID的10分钟离线GPS点数,<terminalId_timeId,gpsOfflineTotal>	 */	private static JavaPairDStream<String, String> getGPSOfflineNum(JavaPairDStream<String, String> inputFormatDstream) {		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getGPSOfflineNumFunc = new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {			@Override			public JavaPairRDD<String, String> call(JavaPairRDD<String, String> rdd) throws Exception {				//step1 根据onlineStatus进行过滤,为0则为离线				return rdd.filter((Tuple2<String, String> v1)->0 == Integer.parseInt(v1._2.split("_")[2]))						//step2 <terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus>转化成<terminalId_timeId(十分钟格式),1>						.mapToPair((Tuple2<String, String> stringStringTuple2)->new Tuple2<String, Integer>(stringStringTuple2._1,1))						//step3 <terminalId_timeId(十分钟格式),1>转化成<terminalId_timeId(十分钟格式)，sum>						.reduceByKey((Integer v1, Integer v2)->v1+v2)						//step4 <terminalId_timeId(十分钟格式)，sum>转化成<terminalId_timeId(十分钟格式)，gpsofflinetotal_sum>						.mapToPair((Tuple2<String, Integer> stringIntegerTuple2)->new Tuple2<String, String>(stringIntegerTuple2._1								,ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSOFFLINETOTAL)+"_"+stringIntegerTuple2._2));			}		};		return inputFormatDstream.transformToPair(getGPSOfflineNumFunc);	}	/**	 * @author liushuming	 * @function  计算单个用户GPS采集频次	 * @input   Dstream,过滤之后的标准格式GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream,返回单个terminalID的GPS采集频率,<terminalId_timeId,gpsFrequent>	 */	public static JavaPairDStream<String, String> getGPSFrequency(JavaPairDStream<String, String> GPSTotalDStream){		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> getFrequencyFunc= new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>(){			@Override			public JavaPairRDD<String, String> call(JavaPairRDD<String, String> rdd) throws Exception {				return rdd.mapToPair(new PairFunction<Tuple2<String,String>, String, Integer>() {					@Override					public Tuple2<String, Integer> call(Tuple2<String, String> stringStringTuple2) throws Exception {						//step1 将<terminalId_timeId(十分钟格式),gpsTotalNum>转化成<terminalId_timeId(十分钟格式),frequent>						//之前讨论频率只有两种，要么是1s，要么是5s。                        /* if(stringStringTuple2._2.equals(ConfigurationManager.getProperty(Constants.SPARK_BATCH_INTERVAL)) ){                             return new Tuple2<String, Integer>(stringStringTuple2._1, 1);                         }else{                             return new Tuple2<String, Integer>(stringStringTuple2._1, 5);                         }*/						//现在根据总点数进行计算						return new Tuple2<String, Integer>(stringStringTuple2._1, Integer.parseInt(stringStringTuple2._2.split("_")[1])/15);					}				}).mapToPair((Tuple2<String, Integer> stringIntegerTuple2)->new Tuple2<String, String>(stringIntegerTuple2._1,						ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSFREQUENT)+"_" + stringIntegerTuple2._2));				//step2 将<terminalId_timeId(十分钟格式),gpsFrequent>转化成<terminalId_timeId(十分钟格式),gpsFrequent_frequent>			}		};		return GPSTotalDStream.transformToPair(getFrequencyFunc);	}	/**	 * @author liushuming	 * @function  计算单个用户GPS十分钟级别总点数	 * @input   Dstream,过滤之后的标准格式GPS数据集,(terminalId_timeId,speed_satelliteNum_onlineStatus)	 * #return  Dstream,返回单个terminalID的GPS十分钟总点数,<terminalId_timeId(十分钟格式),gpsTotalNum_sum>	 */	public static JavaPairDStream<String, String> getGPSTotalNum(JavaPairDStream<String, String> inputFormatDataDStream){		Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>> dealGPSTotalNumFunc				= new Function<JavaPairRDD<String, String>, JavaPairRDD<String, String>>() {			@Override			public JavaPairRDD<String, String> call(JavaPairRDD<String, String> rdd) throws Exception {				//step1.将(terminalId_timeId(十分钟格式),speed_satelliteNum_onlineStatus)转换成(terminalId_timeId(十分钟格式),1)				return rdd.mapToPair((Tuple2<String, String> stringStringTuple2)->new Tuple2<String, Integer>(stringStringTuple2._1, 1))						//step2.统计指标，将(terminalId_timeId(十分钟格式),1)转换成(terminalId_timeId(十分钟格式),sum)						.reduceByKey((Integer v1, Integer v2)->v1+v2)						.mapToPair(new PairFunction<Tuple2<String,Integer>, String, Integer>() {							@Override							public Tuple2<String, Integer> call(Tuple2<String, Integer> stringIntegerTuple2) throws Exception {								//step3.数据修正工作,修正策略如下								//因为频率只可能是1或者5,所以总点数也只可能是两种								//由于是十分钟级别的，所以总点数只可能是600或者120								//这里的处理策略是,如果count()大于120,则返回600，否则返回120								if(stringIntegerTuple2._2 > Integer.parseInt(ConfigurationManager.getProperty(Constants.SPARK_BATCH_INTERVAL))/5){									return new Tuple2<String, Integer>(stringIntegerTuple2._1, Integer.parseInt(ConfigurationManager.getProperty(Constants.SPARK_BATCH_INTERVAL)));								}else{									return new Tuple2<String, Integer>(stringIntegerTuple2._1, Integer.parseInt(ConfigurationManager.getProperty(Constants.SPARK_BATCH_INTERVAL))/5);								}							}						}).mapToPair((Tuple2<String, Integer> stringIntegerTuple2)->new Tuple2<String, String>(stringIntegerTuple2._1,								ConfigurationManager.getProperty(Constants.HBASE_COLUMN_GPSTOTALNUM)+"_" + stringIntegerTuple2._2.toString()));				//step4.(terminalId_timeId(十分钟格式),sum)转化成<terminalId_timeId(十分钟格式),gpsTotalNum_sum>			}		};		return inputFormatDataDStream.transformToPair(dealGPSTotalNumFunc);	}}