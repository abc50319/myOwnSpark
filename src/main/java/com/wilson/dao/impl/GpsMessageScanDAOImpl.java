package com.wilson.dao.impl;import com.wilson.dao.GpsMessageScanDAO;import com.wilson.util.HBaseUtil;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.filter.*;import org.apache.hadoop.hbase.io.ImmutableBytesWritable;import org.apache.hadoop.hbase.mapreduce.TableInputFormat;import org.apache.hadoop.hbase.protobuf.ProtobufUtil;import org.apache.hadoop.hbase.protobuf.generated.ClientProtos;import org.apache.hadoop.hbase.util.Base64;import org.apache.spark.api.java.JavaPairRDD;import org.apache.spark.api.java.JavaSparkContext;import java.io.ByteArrayOutputStream;import java.io.DataOutputStream;/** * 广告黑名单DAO实现类 * @author Administrator * */public class GpsMessageScanDAOImpl implements GpsMessageScanDAO {    /**     * 从Hbase中根据filter获取数据，filter规则已经写死，根据时间进行查询     * param  表名tableName     * return 返回从hbase中查询到的数据，并且转化成为JavaPairRDD<ImmutableBytesWritable, Result>     */    public JavaPairRDD<ImmutableBytesWritable, Result> scanByFilter(String tableName, JavaSparkContext javaSparkContext,String filterStr){        Configuration conf = HBaseUtil.init();        Scan scan = new Scan();        ByteArrayOutputStream out = new ByteArrayOutputStream();        DataOutputStream dataOutputStream = new DataOutputStream(out);        //匹配包含XX字符子串的        Filter rowFilter1 = new RowFilter(CompareFilter.CompareOp.EQUAL, new SubstringComparator(filterStr));        scan.setFilter(rowFilter1);        try{            conf.set(TableInputFormat.INPUT_TABLE, tableName);            ClientProtos.Scan proto = ProtobufUtil.toScan(scan);            String ScanToString = Base64.encodeBytes(proto.toByteArray());            conf.set(TableInputFormat.SCAN,ScanToString);        }catch (Exception e){            e.printStackTrace();        }        //step1 从hbase中读取数据并且转换为RDD        JavaPairRDD<ImmutableBytesWritable, Result> getHbaseDataRDD = javaSparkContext.newAPIHadoopRDD(                conf,                TableInputFormat.class,                ImmutableBytesWritable.class,                Result.class);        return getHbaseDataRDD;    }}